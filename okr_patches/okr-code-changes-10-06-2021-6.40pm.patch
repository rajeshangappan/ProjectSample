 .../DiagramHelper/diagram-helper-util.jsx          |   8 +
 .../DiagramHelper/diagram-json-helper.jsx          |  61 ++
 .../DiagramHelper/diagram-layout-helper.jsx        |  90 +++
 .../DiagramHelper/diagram-okr-helper.jsx           | 141 ++++
 .../DiagramHelper/diagram-selection-helper.jsx     | 211 ++++++
 .../DiagramHelper/diagram-template-helper.tsx      | 764 +++++++++++++++++++++
 .../RelaxedMap/DiagramHelper/okr_data.tsx          |  24 +
 src/components/AlignmentMap/RelaxedMap/index.jsx   | 353 +++++-----
 src/components/AlignmentMap/style.scss             | 130 ++--
 9 files changed, 1529 insertions(+), 253 deletions(-)

diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-helper-util.jsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-helper-util.jsx
new file mode 100644
index 00000000..0fea94ce
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-helper-util.jsx
@@ -0,0 +1,8 @@
+export class DiagramHelperUtil {
+    constructor() {
+
+    }
+    static isNullOrUndefined(val) {
+        return val === null || val === undefined;
+    }
+}
diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-json-helper.jsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-json-helper.jsx
new file mode 100644
index 00000000..a3775642
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-json-helper.jsx
@@ -0,0 +1,61 @@
+export class DiagramJsonHelper {
+    static diagramIns;
+    static jsonData;
+    static allKrNodes = [];
+    static allKrLink = [];
+    constructor() {
+    }
+    static SetDiagramIns(diagramIns) {
+        this.diagramIns = diagramIns;
+    }
+    static SetData(jsonData) {
+        this.jsonData = jsonData;
+    }
+    static UpdateChildOkrs(jsonData) {
+        this.SetData(jsonData);
+        for (let i = 0; i < this.jsonData.length; i++) {
+            let data = this.jsonData[i];
+            if (data?.okrViewKeyResults && data.okrViewKeyResults?.length > 0) {
+                for (let j = 0; j < data.okrViewKeyResults.length; j++) {
+                    let result = data.okrViewKeyResults[j];
+                    if (result.parentId) {
+                        let parentOkr = this.GetOkrResultDataById(result.parentId);
+                        if (parentOkr) {
+                            if (!parentOkr.childOkrs) {
+                                parentOkr.childOkrs = [];
+                            }
+                            parentOkr.childOkrs.push(result.krId);
+                        }
+                    }
+                    if (!result.krClassNames) {
+                        result.krClassNames = "";
+                    }
+                }
+            }
+        }
+    }
+    static GetOkrResultDataById(krId) {
+        let jsonData = this.jsonData;
+        let okrResult;
+        let okr
+        for (let i = 0; i < jsonData.length; i++) {
+            okr = jsonData[i];
+            okrResult = this.GetOkrResultObject(krId, okr);
+            if (okrResult) {
+                return okrResult;
+            }
+        }
+        return null;
+    }
+    static GetOkrResultObject(krId, okr) {
+        if (okr?.okrViewKeyResults && okr.okrViewKeyResults?.length > 0) {
+            for (let j = 0; j < okr.okrViewKeyResults.length; j++) {
+                if (okr.okrViewKeyResults[j].krId === krId) {
+                    return okr.okrViewKeyResults[j];
+                }
+            }
+        }
+    }
+
+   
+}
diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-layout-helper.jsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-layout-helper.jsx
new file mode 100644
index 00000000..c9cdd2d4
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-layout-helper.jsx
@@ -0,0 +1,90 @@
+import { DiagramHelperUtil as Util } from './diagram-helper-util';
+let diagramIns;
+let layoutNodes;
+let diagramOkrHelper;
+export class DiagramLayoutHelper {
+    constructor(diagramInstance) {
+        this.SetDiagramInstance(diagramInstance);
+    }
+    SetDiagramInstance(diagramInstance, diagramOkrHelperIns) {
+        diagramIns = diagramInstance;
+        diagramOkrHelper = diagramOkrHelperIns
+    }
+    DockToTop(diagramInstance, diagramOkrHelperIns) {
+        this.SetDiagramInstance(diagramInstance, diagramOkrHelperIns);
+        this.MoveToTop();
+    }
+    GetLayoutNodes() {
+        if (Util.isNullOrUndefined(layoutNodes)) {
+            layoutNodes = diagramIns.nodes.filter((item, index, array) => !item.excludeFromLayout);
+        }
+        return layoutNodes;
+    }
+    MoveToTop() {
+        let levelOffsetX = this.GetAllLevelsXValues();
+        for (let i = 0; i < levelOffsetX.length; i++) {
+            let nodes = this.GetSameLevelNodes(levelOffsetX[i]);
+            let prevY = 0;
+            let prevNode = null;
+            let i = 0;
+            nodes.forEach((item, index, array) => {
+                i = index;
+                let lowYChildNode = this.GetLowestYNode(item["outEdges"]);
+                if (lowYChildNode !== null && lowYChildNode !== undefined) {
+                    if (i === 0) {//&& this.IsSibling(item, prevNode)
+                        item.offsetY = lowYChildNode.offsetY;
+                        diagramOkrHelper.UpdateChildOffsets(item);
+                    }
+                    else {
+                        if (prevY < lowYChildNode.offsetY) {
+                            item.offsetY = lowYChildNode.offsetY;
+                            diagramOkrHelper.UpdateChildOffsets(item);
+                        } else {
+                            item.offsetY = prevY;
+                            diagramOkrHelper.UpdateChildOffsets(item);
+                        }
+                    }
+                    prevY = item.offsetY + 200 + diagramIns.layout.verticalSpacing;
+                    //200 is min node height 
+                    prevNode = item;
+                }
+            });
+        }
+    }
+    GetLowestYNode(outEdges) {
+        let node;
+        if (!Util.isNullOrUndefined(outEdges) && outEdges.length > 0) {
+            let cnode;
+            for (let i = 0; i < outEdges.length; i++) {
+                let edge = diagramIns.getConnectorObject(outEdges[i]);
+                cnode = diagramIns.getNodeObject(edge.targetID);
+                if (node === null || node === undefined || cnode.offsetY < node.offsetY) {
+                    node = cnode;
+                }
+            }
+        }
+        return node;
+    }
+    GetAllLevelsXValues() {
+        let allOffsetX = this.GetLayoutNodes().map(x => x.offsetX);
+        let uniqueX = allOffsetX.filter((item, index) => { return allOffsetX.indexOf(item) === index; });
+        return uniqueX.sort(function (n1, n2) { return n2 - n1 }); //descending order
+    }
+    GetSameLevelNodes(offsetX) {
+        return this.GetLayoutNodes().filter((item, index, array) => item.offsetX === offsetX).sort(function (n1, n2) { return n1.offsetY - n2.offsetY });
+    }
+    IsSibling(node1, node2) {
+        let inEdges1 = (node1).inEdges;
+        let inEdges2 = (node1).inEdges;
+        if (!Util.isNullOrUndefined(inEdges1) && !Util.isNullOrUndefined(inEdges2)) {
+            for (let i = 0; i < inEdges1.length; i++) {
+                for (let j = 0; j < inEdges2.length; j++) {
+                    if (inEdges1[i] == inEdges2[j]) {
+                        return true;
+                    }
+                }
+            }
+        }
+        return false;
+    }
+}
diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-okr-helper.jsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-okr-helper.jsx
new file mode 100644
index 00000000..ec1a432d
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-okr-helper.jsx
@@ -0,0 +1,141 @@
+import { DiagramTemplateHelper } from './diagram-template-helper';
+export class DiagramOkrHelper {
+    diagramIns;
+    diagramTemplateHelper;
+    canvas;
+    firstRowHeight = 200;
+    krHeight = 34;
+    margin = { left: 10, top: 10, right: 10, bottom: 10 };
+    krSpace = 5;
+
+    getLeftPort(node) {
+        let leftMidPort = {
+            style: {
+                strokeColor: '#366F8C',
+                fill: '#366F8C'
+            },
+            shape: 'Square',
+            id: node.id + '-left-port',
+            visibility: 2,
+            offset: {
+                x: 0,
+                y: 0.13
+            }
+        };
+        return leftMidPort;
+    }
+    getRightPort(node) {
+        let rightMidPort = {
+            style: {
+                strokeColor: '#366F8C',
+                fill: '#366F8C'
+            },
+            shape: 'Square',
+            id: node.id + '-right-port',
+            visibility: 2,
+            offset: {
+                x: 1,
+                y: 0.13
+            }
+        };
+        return rightMidPort;
+    }
+    construtor(diagramTemplateHelper) {
+        this.diagramTemplateHelper = diagramTemplateHelper;
+    }
+    SetHelpers(diagramInstance, diagramTemplateHelper) {
+        this.diagramIns = diagramInstance;
+        this.diagramTemplateHelper = diagramTemplateHelper;
+    }
+
+    //#region Okr Templated Nodes Creation
+    GetOkrHeight(node) {
+        let height = this.firstRowHeight;
+        if (node.data && node.data.okrViewKeyResults && node.data.okrViewKeyResults.length > 0) {
+            let resCount = node.data.okrViewKeyResults.length
+            height += (resCount * this.krHeight) + ((resCount - 1) * this.krSpace);
+        }
+        height += this.margin.bottom;
+        return height;
+    }
+    CreateOkrNodes(diagramInstance, diagramTemplateHelper) {
+        this.SetHelpers(diagramInstance, diagramTemplateHelper);
+        let ins = this;
+        let nodes = this.diagramIns.nodes;
+        let len = nodes.length;
+        for (let i = 0; i < len; i++) {
+            ins.CreateOkrNode(nodes[i], nodes[i].data, diagramInstance);
+        }
+
+    }
+    CreateOkrNode(node, data) {
+        this.CreateFirstRow(node, data);
+        this.CreateKrResultItems(node, data);
+        this.UpdateChildOffsets(node);
+    }
+    CreateFirstRow(node, okrData) {
+        let margin = this.margin;
+        let okrFirstRow = {
+            id: node.id + '_okrFirstRow',
+            height: node.height - margin.bottom,
+            width: node.width - margin.right,
+            data: okrData,
+            template: this.diagramTemplateHelper.getTemplate,
+            shape: {
+                type: 'HTML',
+            },
+            pivot: { x: 0, y: 0 },
+            excludeFromLayout: true
+        };
+        this.diagramIns.add(okrFirstRow);
+
+        node.children = [
+            okrFirstRow.id
+        ];
+    }
+    CreateKrResultItems(node, okrData) {
+        let margin = this.margin;
+        if (okrData.okrViewKeyResults && okrData.okrViewKeyResults.length > 0) {
+            for (let i = 0; i < okrData.okrViewKeyResults.length; i++) {
+                let okrKrItemRow = {
+                    id: 'okrKrItem_' + okrData.okrViewKeyResults[i].krId,
+                    height: this.krHeight,
+                    width: node.width - margin.left - margin.right,
+                    data: { okr: okrData, kr: okrData.okrViewKeyResults[i] },
+                    template: this.diagramTemplateHelper.getTemplate,
+                    shape: {
+                        type: 'HTML',
+                    },
+                    pivot: { x: 0, y: 0 },
+                    excludeFromLayout: true
+                };
+                this.diagramIns.add(okrKrItemRow);
+                node.children.push(okrKrItemRow.id);
+            }
+        }
+    }
+    UpdateChildOffsets(node) {
+        let margin = this.margin;
+        let okrFirstRow = this.diagramIns.nodes.find(n => n.id === node.id + '_okrFirstRow');
+        let okrData = node.data;
+        if (okrFirstRow) {
+            okrFirstRow.offsetX = node.offsetX + margin.left;
+            okrFirstRow.offsetY = node.offsetY + margin.top;
+        }
+        if (okrData && okrData.okrViewKeyResults && okrData.okrViewKeyResults.length > 0) {
+            let startX = node.offsetX + margin.left;
+            let startY = okrFirstRow.offsetY + 190;
+            for (let i = 0; i < okrData.okrViewKeyResults.length; i++) {
+                let krId = okrData.okrViewKeyResults[i].krId;
+                let okrKrItemRow = this.diagramIns.nodes.find(n => n.id === 'okrKrItem_' + krId);
+                if (okrKrItemRow) {
+                    okrKrItemRow.offsetX = startX;
+                    okrKrItemRow.offsetY = startY;
+                    startY += okrKrItemRow.height + this.krSpace;
+                }
+            }
+        }
+
+    }
+    //#endregio
+}
diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-selection-helper.jsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-selection-helper.jsx
new file mode 100644
index 00000000..62f3af66
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-selection-helper.jsx
@@ -0,0 +1,211 @@
+let nodeSelectedStyle = {
+    strokeColor: "rgba(57,158,247,255)",
+    fill: "white",
+    strokeWidth: 3
+}
+let nodeDefaultStyle = {
+    strokeColor: "#C8C8C8",
+    fill: 'white',
+    strokeWidth: 1
+}
+let parentConnectorDefaultStyle = {
+    strokeColor: '#5B708B',
+    strokeWidth: 3,
+    opacity: 1,
+    targetDecorator: {
+        fill: '#5B708B',
+        strokeColor: '#5B708B',
+        opacity: 1
+    },
+}
+let parentConnectorHiddenStyle = {
+    strokeColor: '#C8C8C8',
+    strokeWidth: 3,
+    opacity: 0.5,
+    targetDecorator: {
+        fill: '#C8C8C8',
+        strokeColor: '#C8C8C8',
+        opacity: 0.5
+    },
+}
+
+let connectorDefaultStyle = {
+    strokeColor: "#C8C8C8",
+    strokeWidth: 1,
+    opacity: 0.5
+}
+let connectorSelectedStyle = {
+    strokeColor: "rgba(57,158,247,255)",
+    strokeWidth: 2,
+    opacity: 1
+}
+export class DiagramSelectionHelper {
+    //#region Node Selection
+    diagramIns;
+    allKrHelperLink = [];
+    allKrHelperNodes = [];
+    SetHelpers(diagramInstance) {
+        this.diagramIns = diagramInstance;
+    }
+    GetKrResultItem(args) {
+        if (args && args.actualObject && args.actualObject && args.actualObject.id.indexOf("okrKrItem_") >= 0) {
+            return args.actualObject;
+        }
+        return null;
+    }
+    OnClickDiagram(args, diagramInstance) {
+        this.SetHelpers(diagramInstance);
+        this.RemoveAllSelection();
+        let krItemNode = this.GetKrResultItem(args);
+        if (krItemNode && krItemNode.data && krItemNode.data.kr) {
+            let okr = krItemNode.data.okr;
+            let kr = krItemNode.data.kr;
+            this.SelectKrResult(kr, okr);
+        }
+    }
+    IsNullOrUndefined(obj) {
+        return obj == null || obj === undefined;
+    }
+    IsSelectionHelper(obj) {
+        return obj && obj.id.indexOf("_link_helper") >= 0;
+    }
+    SelectKrResult(krData, okrData) {
+        let element = document.getElementById("kr_" + krData.krId);
+        element.style.border = "2px solid " + nodeSelectedStyle.strokeColor;
+        element.classList.add("selected");
+        if (krData && krData.childOkrs) {
+            this.AddClass(krData.childOkrs, "selected");
+            this.CreateConnections(krData, okrData);
+        }
+        this.ToggleParentConnectorStyle(parentConnectorHiddenStyle);
+    }
+    CreateConnections(krData, okrData) {
+        let srcKrId = krData.krId;
+        let targetElementIds = krData.childOkrs;
+        let srcKrNode = this.GetNode("okrKrItem_" + srcKrId);
+        let srcHelperNode = this.GetOrCreateHelperNode(srcKrId, "source", srcKrNode, '$30k');
+        for (let i = 0; i < targetElementIds.length; i++) {
+            let targetKrNode = this.GetNode("okrKrItem_" + targetElementIds[i]);
+            let targetHelperNode = this.GetOrCreateHelperNode("okrKrItem_" + targetElementIds[i], "target", targetKrNode, '$16k');
+            let linkId = srcHelperNode.id + "_" + targetHelperNode.id + "_link_helper";
+            let link = this.GetConnector(linkId);
+            if (!link || !link.id) {
+                link = {
+                    sourceID: srcHelperNode.id,
+                    targetID: targetHelperNode.id,
+                    id: srcHelperNode.id + "_" + targetHelperNode.id + "_link_helper",
+                    sourceDecorator: { shape: 'None' },
+                    targetDecorator: { shape: 'None' },
+                    type: 'Bezier',
+                }
+                link.style = {
+                    strokeColor: connectorSelectedStyle.strokeColor,
+                    strokeWidth: connectorSelectedStyle.strokeWidth
+                }
+                this.diagramIns.add(link);
+                this.allKrHelperLink.push(link);
+            }
+            link.visible = true;
+        }
+    }
+
+    GetOrCreateHelperNode(krId, type, krNode, text) {
+        let nodeId = type === "source" ? krId + "_srcNode_link_helper" : krId + "_targetNode_link_helper";
+        let helperNode = this.diagramIns.getNodeObject(nodeId);
+        if (!helperNode || !helperNode.id) {
+            helperNode = {
+                id: nodeId,
+                width: 50,
+                height: 15,
+                style: {
+                    strokeColor: nodeSelectedStyle.strokeColor,
+                    fill: nodeSelectedStyle.strokeColor,
+                    strokeWidth: 1
+                },
+                annotations: [{
+                    content: text,
+                    style: {
+                        color: 'white',
+                        opacity: 1
+                    }
+                }],
+                pivot: { x: 0, y: 0 }
+            }
+            helperNode.offsetY = krNode.offsetY + krNode.height / 2 - helperNode.height / 2;
+            if (type === "target") {
+                helperNode.shape = {
+                    type: 'Path',
+                    data: 'M 0 5 L 5 0 L 20 0 L 20 10 L 5 10 z'
+                };
+                helperNode.style = {
+                    strokeColor: nodeSelectedStyle.strokeColor,
+                    fill: 'white',
+                    strokeWidth: 1
+                }
+                helperNode.annotations = [{
+                    content: text,
+                    style: {
+                        color: nodeSelectedStyle.strokeColor
+                    }
+                }];
+                helperNode.offsetX = krNode.offsetX - helperNode.width;
+            } else {
+                helperNode.offsetX = krNode.offsetX + krNode.width;
+            }
+            this.diagramIns.add(helperNode);
+            this.allKrHelperNodes.push(helperNode);
+        }
+        helperNode.visible = true;
+        return helperNode;
+    }
+    RemoveAllSelection() {
+        this.RemoveClass(".kr-item", "selected");
+        for (let i = 0; i < this.allKrHelperNodes.length; i++) {
+            this.diagramIns.remove(this.allKrHelperNodes[i]);
+            //this.GetNode(this.allKrHelperNodes[i].id).visible = false;
+        }
+        for (let i = 0; i < this.allKrHelperLink.length; i++) {
+            this.diagramIns.remove(this.allKrHelperLink[i]);
+            //this.GetConnector(this.allKrHelperLink[i].id).visible = false;
+        }
+        this.ToggleParentConnectorStyle(parentConnectorDefaultStyle);
+
+    }
+    ToggleParentConnectorStyle(style) {
+        let ins = this;
+        this.diagramIns.connectors.forEach((c) => {
+            if (!ins.IsSelectionHelper(c)) {
+                c.style.strokeColor = style.strokeColor;
+                c.style.opacity = style.opacity;
+                if (c.targetDecorator) {
+                    c.targetDecorator.style.strokeColor = style.targetDecorator.strokeColor;
+                    c.targetDecorator.style.fill = style.targetDecorator.fill;
+                    c.targetDecorator.style.opacity = style.targetDecorator.opacity;
+                }
+            }
+        });
+        this.diagramIns.dataBind();
+    }
+    GetNode(nodeId) {
+        let nodeModel = this.diagramIns.nodes.find(n => n.id === nodeId);
+        return nodeModel;
+    }
+    GetConnector(connectorId) {
+        let connModel = this.diagramIns.connectors.find(c => c.id === connectorId);
+        return connModel;
+    }
+    RemoveClass(selector, className) {
+        document.querySelectorAll(selector).forEach((element) => {
+            element.classList.remove(className);
+            element.style.border = "1px solid #cde4ef";
+        });
+    }
+    AddClass(krChilds, className) {
+        krChilds.forEach((childId) => {
+            let element = document.getElementById("kr_" + childId);
+            element.classList.add(className);
+            element.style.border = "2px solid " + nodeSelectedStyle.strokeColor;
+        });
+    }
+    //#endregion
+}
\ No newline at end of file
diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-template-helper.tsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-template-helper.tsx
new file mode 100644
index 00000000..b0663bc9
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/diagram-template-helper.tsx
@@ -0,0 +1,764 @@
+import { Box, IconButton, Tooltip, Typography } from '@material-ui/core';
+import React, { useState, useEffect } from 'react';
+import '../../../../styles/alignmentMap.scss';
+import OKRFlag from '../../../../images/okrFlag.svg';
+import { IndividualSmallIcon, LinkIcon, PrivateIcon } from '../../../../config/svg/CommonSvg';
+import krFlag from '../../../../images/krFlag.svg';
+import CircularProgress from '../../../OkrAction/CircularProgress';
+import { UserAvatarGroup } from '../../../Common/UserAvatarGroup';
+import { Enums } from '../../../../config/enums';
+import { getCurrentUserDetails, getMonthDate } from '../../../../config/utils';
+import { OKRButton } from '../../../Common/OKRButton';
+import { SettingsIcon } from '../../../../config/svg/MyGoalSvg';
+import { RightArrowIcon } from '../../../../config/svg/ArrowSvg';
+import { OkrPopperMenu } from '../../../OkrAction/OkrPopperMenu';
+import { GoalAttributes } from '../../AlignmentListing/GoalAttributes';
+import { getDifferenceBetweenDates } from '../../../../config/utils';
+import { OkrProgressBar } from '../../../OkrAction/OkrProgressBar';
+import moment from 'moment';
+import { getLocalStorageItem } from '../../../../services/StorageService';
+import AlertDialog from '../../../Common/Dialog';
+
+export class DiagramTemplateHelper {
+	props: any;
+	userDetail: any;
+	keyAttribute: any = {};
+	keyRes: boolean = false;
+	public dataUpdated: any = {};
+	defaultGaolDateError = { error: '', helperText: '', type: '' };
+	showKr: boolean = false;
+	goalAttrDateError: any = this.defaultGaolDateError;
+	snackbarProps: any = {};
+	keyData: any = {};
+	defaultKRDateError: any = { error: '', helperText: '', type: '' };
+	krAttrDateError: any = this.defaultKRDateError;
+	year: any;
+	krLoader: boolean = false;
+	objectiveDetail: any;
+	okr: any;
+	modalPropsKR: any = { open: false, type: '', message: '' };
+	goalsAttribute: any = {};
+	openObjectAttribute: boolean = false;
+	loader: boolean = false;
+	isSaveDisabled: boolean = true;
+	constructor(properties: any) {
+		this.props = properties;
+		this.dataUpdated = {};
+		this.objectiveDetail = {
+			...this.props.goalDetailObject,
+			myGoalsDetails: [{ ...this.props.keyDetailObject }]
+		};
+		this.userDetail = JSON.parse(getLocalStorageItem('userDetail') || '{}');
+		this.year = getLocalStorageItem('currentYear');
+	}
+	setIsSaveDisabled(value: boolean) {
+		this.isSaveDisabled = value;
+	}
+	setLoader(value: boolean) {
+		this.loader = value;
+	}
+	setOpenObjectAttribute(value: boolean) {
+		this.openObjectAttribute = value;
+	}
+	setGoalsAttribute(value: any) {
+		this.goalsAttribute = value;
+	}
+	setmodalPropsKR(value: any) {
+		this.modalPropsKR = value;
+	}
+	setObjectiveDetail(value: any) {
+		this.objectiveDetail = value;
+	}
+	setKrLoader(value: any) {
+		this.krLoader = true;
+	}
+	setKRAttrDateError(value: any) {
+		this.krAttrDateError = value;
+	}
+	setKeyData(value: any) {
+		this.keyData = value;
+	}
+	setSnackbarProps(value: any) {
+		this.snackbarProps = value;
+	}
+	setKeyAttribute(value: any) {
+		this.keyAttribute = value;
+	}
+	setKeyRes(value: boolean) {
+		this.keyRes = value;
+	}
+	setdataUpdated(value: any) {
+		this.dataUpdated(value);
+	}
+	setShowKr(value: boolean) {
+		this.showKr = value;
+	}
+	setGaolAttrDateError(value: any) {
+		this.goalAttrDateError = value;
+	}
+	public getTemplate(node: any) {
+		let okr = node.data;
+
+		let nodeTemplate = <div>test</div>;
+		if (node.id.indexOf("okrFirstRow") >= 0) {
+			nodeTemplate = getFirstRowTemplate(node.data, this);
+		}
+		if (node.id.indexOf("okrKrItem") >= 0) {
+			nodeTemplate = getKrItemTemplate(node.data, this);
+		}
+		return nodeTemplate;
+	}
+	handleAcceptDeclineClick = (open: Boolean, okr: any, kr: any, type: String, KRType: String) => {
+		let t = this.props.t;
+		if (okr.objectiveId > 0) {
+			Promise.allSettled([this.props.getOkrDetail(okr.objectiveId), this.props.getKrDetail(kr.krId)]).then((response: any) => {
+				if (response) {
+					let getOKRDetail =
+						Boolean(response) && response.length && response[0] && response[0].value ? response[0].value : '';
+					let getKRDetail =
+						Boolean(response) && response.length && response[1] && response[1].value ? response[1].value : '';
+					if (getOKRDetail.status === 200 && getKRDetail.status === 200) {
+						if (getKRDetail.data.entity.krStatusId === Enums.KR_STATUS_PENDING) {
+							this.props.setOpenDrawer({
+								open: true,
+								okr: getOKRDetail.data.entity,
+								kr: getKRDetail.data.entity,
+								type: type,
+								KRType: 'WithParent',
+							});
+						} else {
+							this.props.setModalProps({
+								open: true,
+								type: 'AcceptKR',
+								message: t('actionAlreadyTaken'),
+								module: 'user',
+								isCancel: true,
+							});
+						}
+					}
+				}
+			});
+		}
+	};
+	handleKRClick = async (krObj: any, okrObj: any) => {
+		let okrs = JSON.parse(JSON.stringify(this.props.listOkrResult));
+		let currentORK = okrs.myGoalOkrResponses.filter((item: any) => item.goalObjectiveId === okrObj.objectiveId);
+		let getKR = currentORK[0].myGoalsDetails.filter((kr: any) => kr.goalKeyId === krObj.krId);
+		let obj = {
+			kr: getKR[0],
+			okr: currentORK[0],
+			actionType: 'editKR',
+			goalDetail: {},
+			showAttributeDrawer: true,
+		};
+		getKR[0] = {
+			...getKR[0],
+			contributors: getKR[0].contributors.filter(
+				(item: any) => !item.isSource && item.employeeId !== this.userDetail.employeeId
+			),
+		};
+		this.setKeyRes(true);
+		this.setKeyAttribute(getKR[0]);
+		this.setdataUpdated(obj);
+	};
+	handleDrawerClose = async (_event: any, type: String) => {
+		this.setShowKr(false);
+		this.setGaolAttrDateError(this.defaultGaolDateError);
+		let keyAttribute = this.keyAttribute;
+		let t = this.props.t
+		if (type === 'save') {
+			this.setSnackbarProps({});
+			const datesDifferenceInDays = moment(
+				new Date(keyAttribute.startDate ? keyAttribute.startDate : this.keyData?.startDate || new Date())
+			).isAfter(new Date(keyAttribute.dueDate ? keyAttribute.dueDate : this.keyData.dueDate || new Date()), 'days');
+			if (Boolean(datesDifferenceInDays)) {
+				this.setGaolAttrDateError({
+					error: t('startDateDueDateError'),
+					helperText: t('startDateDueDateError'),
+					type: 'dueDate',
+				});
+			} else {
+				let year = this.year;
+				const { showAttributeDrawer, actionType } = this.dataUpdated || {};
+				if (showAttributeDrawer && actionType === 'editKR') {
+					const data = { ...keyAttribute, year };
+					if (this.validateAddKRForm(data)) {
+						this.setKrLoader(true);
+						const response = await this.props.updateKrAttributes(data);
+						if (response && response.data && response.data.status === 200) {
+							this.setSnackbarProps({ show: true, message: response?.data?.messageList?.Result, variant: 'success' });
+							this.setKrLoader(false);
+							this.props.setGoalDetail({});
+							this.setdataUpdated({});
+							this.setShowKr(false);
+							this.props.fetchOkr();
+							this.props.getAlignmentData();
+						} else {
+							this.setSnackbarProps({
+								show: true,
+								message: t('someErrorOccurred'),
+								variant: 'error',
+							});
+							this.setKrLoader(false);
+						}
+						this.setKRAttrDateError(this.defaultKRDateError);
+						this.props.setOpenDrawer(false);
+						this.setKeyAttribute({});
+					}
+				} else {
+					if (this.validateAddKRForm(keyAttribute)) {
+						let dataUpdated = this.dataUpdated
+						if (showAttributeDrawer && actionType === 'addNewKr') {
+							this.setdataUpdated({ ...dataUpdated, kr: { ...dataUpdated.kr, ...keyAttribute }, saved: true });
+							this.setKRAttrDateError(this.defaultKRDateError);
+							this.props.setOpenDrawer(false);
+							this.setKeyAttribute({});
+							this.setShowKr(false);
+						} else {
+							this.updateFormDetail(this.keyData, '', '', true, keyAttribute);
+							this.setKRAttrDateError(this.defaultKRDateError);
+							this.props.setOpenDrawer(false);
+							this.setKeyAttribute({});
+							this.setShowKr(false);
+						}
+					}
+				}
+			}
+		} else if (type === 'close') {
+			if (!this.isKRAttributeUpdated()) {
+				this.setmodalPropsKR({
+					open: true,
+					type: 'editKR',
+					message: t('unSavedItemAlert'),
+					module: 'user',
+					details: { id: '' },
+				});
+			} else {
+				this.setKeyRes(false);
+				this.setGoalsAttribute({});
+				this.props.setOpenDrawer(false);
+			}
+		}
+	};
+	isKRAttributeUpdated = () => {
+		let dataUpdated = this.dataUpdated;
+		if ((dataUpdated && dataUpdated.actionType === 'editKR') || dataUpdated.actionType === 'addNewKr') {
+			const keyDetailsRes = dataUpdated?.okr.assignmentTypeId === 1 ? dataUpdated.okr : dataUpdated.kr;
+			return this.checkFormValues(keyDetailsRes);
+		} else {
+			return this.checkFormValues(this.keyData);
+		}
+	};
+
+	checkFormValues = (keyData: any) => {
+		let keyAttribute = this.keyAttribute;
+		return (keyAttribute.startDate && !getDifferenceBetweenDates(keyData.startDate, keyAttribute.startDate)) ||
+			(keyAttribute.dueDate && !getDifferenceBetweenDates(keyAttribute.dueDate, keyData.dueDate)) ||
+			(keyAttribute.metricId && keyAttribute.metricId !== keyData.metricId) ||
+			(keyAttribute.currencyId && keyAttribute.currencyId !== keyData.currencyId) ||
+			(keyAttribute.startValue && keyAttribute.startValue !== keyData.startValue) ||
+			(keyAttribute.targetValue && keyAttribute.targetValue !== keyData.targetValue) ||
+			(keyAttribute?.keyNotes && keyAttribute?.keyNotes !== keyData.keyNotes) ||
+			(keyAttribute?.keyDescription && keyAttribute?.keyDescription !== keyData.keyDescription) ||
+			(keyAttribute.contributors && keyAttribute.contributors.length !== keyData.contributors.length - 1)
+			? false
+			: true;
+	};
+	updateFormDetail = (item: any, key: any, value: any, isKeyData: Boolean, keyAttribute: any) => {
+		const { myGoalsDetails } = this.objectiveDetail;
+		let updatedDetail = [];
+		if (isKeyData) {
+			let keyAttribute = this.keyAttribute;
+			updatedDetail = myGoalsDetails.map((element: any) => {
+				if (element.id === item.id) {
+					element.startDate = keyAttribute.startDate ? keyAttribute.startDate : element.startDate;
+					element.dueDate = keyAttribute.dueDate ? keyAttribute.dueDate : element.dueDate;
+					element.startValue = keyAttribute.startValue ? keyAttribute.startValue : element.startValue;
+					element.targetValue = keyAttribute.targetValue ? keyAttribute.targetValue : element.targetValue;
+					element.metricId = keyAttribute.metricId ? keyAttribute.metricId : element.metricId;
+					element.currencyId = keyAttribute.currencyId ? keyAttribute.currencyId : element.currencyId;
+					element.showCurrentTarget = keyAttribute.showCurrentTarget
+						? keyAttribute.showCurrentTarget
+						: element.showCurrentTarget;
+					element.metricName = keyAttribute.metricName ? keyAttribute.metricName : element.metricName;
+					element.contributors = keyAttribute.contributors ? keyAttribute.contributors : element.contributors;
+					element.keyNotes = keyAttribute.keyNotes ? keyAttribute.keyNotes : element.keyNotes;
+					element.keyDescription = keyAttribute.keyDescription ? keyAttribute.keyDescription : element.keyDescription;
+					element.isNewKey = false;
+				}
+				return element;
+			});
+		} else {
+			updatedDetail = myGoalsDetails.map((element: any) => {
+				if (element.id === item.id) {
+					if (key === 'keyDescription' || key === 'dueDate') {
+						element.isTyped = true;
+						element.isNewKey = false;
+					}
+					element[key] = value;
+				} else {
+					element.isTyped = false;
+				}
+				return element;
+			});
+		}
+
+		this.setObjectiveDetail({ ...this.objectiveDetail, isTyped: false, myGoalsDetails: updatedDetail });
+		// if (key === 'keyDescription' || key === 'dueDate') {
+		// 	getCallAutoSave({ ...objectiveDetail, isTyped: false, myGoalsDetails: updatedDetail });
+		// }
+	};
+	validateAddKRForm = (formData: any) => {
+		let t = this.props.t;
+		if (formData?.metricId === Enums.ONE || formData?.metricId === Enums.TWO || formData?.metricId === Enums.THREE) {
+			if (formData.startValue === formData.targetValue) {
+				this.setKRAttrDateError({
+					error: t('startCurrentSameError'),
+					helperText: t('startCurrentSameError'),
+					type: 'targetValue',
+				});
+				return false;
+			}
+		}
+		if (formData.keyDescription === '') {
+			this.setKRAttrDateError({
+				error: t('keyResultError'),
+				helperText: t('keyResultError'),
+				type: 'keyDescription',
+			});
+			return false;
+		} else if (formData.keyDescription.trim() === '') {
+			this.setKRAttrDateError({
+				error: t('keyResultError'),
+				helperText: t('keyResultError'),
+				type: 'keyDescription',
+			});
+			return false;
+		}
+		return true;
+	};
+	handleKebabClick = (kr: any, type: any) => {
+		// let krDlt = okr.filter((item:any ) => item.goalObjectiveId)
+		if (type === 2) {
+			this.setKeyData(this.okr);
+		} else if (type === 4) {
+			this.setKeyData(kr);
+		}
+	};
+	isGoalAttributeUpdated = () => {
+		let objectiveDetail = this.objectiveDetail;
+		let isSaveDisabled = this.isSaveDisabled;
+		let goalsAttribute = this.goalsAttribute;
+		return objectiveDetail &&
+			!isSaveDisabled &&
+			((goalsAttribute.objectiveDescription &&
+				objectiveDetail.objectiveDescription !== goalsAttribute.objectiveDescription) ||
+				objectiveDetail.name !== goalsAttribute.name ||
+				objectiveDetail.isPrivate !== goalsAttribute?.isPrivate ||
+				(goalsAttribute.startDate && !getDifferenceBetweenDates(objectiveDetail.startDate, goalsAttribute.startDate)) ||
+				(goalsAttribute.endDate && !getDifferenceBetweenDates(goalsAttribute.endDate, objectiveDetail.endDate)))
+			? false
+			: isSaveDisabled
+				? true
+				: true;
+	};
+	validGoalAttributeAlignmentForm = (formAlignData: any) => {
+		let t = this.props.t;
+		if (!formAlignData.objectiveName) {
+			this.setGaolAttrDateError({
+				helperText: t('objectiveNameError'),
+				type: 'objectiveName',
+				error: t('objectiveNameError'),
+			});
+			return false;
+		} else if (formAlignData.objectiveName?.trim() === '') {
+			this.setGaolAttrDateError({
+				type: 'objectiveName',
+				helperText: t('objectiveNameError'),
+				error: t('objectiveNameError'),
+			});
+			return false;
+		}
+		return true;
+	};
+	handleCloseObjectiveAttribute = async (event: any, type: String) => {
+		this.setShowKr(false);
+		this.setGaolAttrDateError(this.defaultGaolDateError);
+		let t = this.props.t;
+		if (type === 'save') {
+			this.setSnackbarProps({});
+			let goalsAttribute = this.goalsAttribute;
+			let objectiveDetail = this.objectiveDetail;
+			const datesDifferenceInDays = moment(
+				new Date(goalsAttribute.startDate ? goalsAttribute.startDate : objectiveDetail.startDate || new Date())
+			).isAfter(
+				new Date(goalsAttribute.endDate ? goalsAttribute.endDate : objectiveDetail.endDate || new Date()),
+				'days'
+			);
+			if (Boolean(datesDifferenceInDays)) {
+				this.setGaolAttrDateError({
+					error: t('startDateDueDateError'),
+					helperText: t('startDateDueDateError'),
+					type: 'dueDate',
+				});
+			} else {
+				let goalDetail = this.props.goalDetail;
+				if (goalDetail && goalDetail.showAttributeDrawer && goalDetail.actionType === 'editGoal') {
+					if (this.validGoalAttributeAlignmentForm(goalsAttribute)) {
+						this.setLoader(true);
+						const data = { ...goalsAttribute };
+						const response = await this.props.updateGoalAttributes(data);
+						if (response && response.data && response.data.status === 200) {
+							this.setSnackbarProps({ show: true, message: response?.data?.messageList?.Result, variant: 'success' });
+							this.setLoader(false);
+							this.setIsSaveDisabled(true);
+							this.setGaolAttrDateError(this.defaultGaolDateError);
+							// setOpenDrawer(false);
+							this.setOpenObjectAttribute(false);
+							this.setGoalsAttribute({});
+							this.props.setGoalDetail({});
+							this.props.fetchOkr();
+							this.props.getAlignmentData();
+						}
+					}
+				} else {
+					if (this.validGoalAttributeAlignmentForm(goalsAttribute)) {
+						if (goalsAttribute.teamOkrRequests?.length > 0) {
+							objectiveDetail.goalTypeId = 1;
+						}
+						this.setObjectiveDetail({
+							...objectiveDetail,
+							objectiveName: goalsAttribute.objectiveName
+								? goalsAttribute.objectiveName
+								: objectiveDetail.objectiveName,
+							isPrivate:
+								goalsAttribute.isPrivate === false
+									? goalsAttribute.isPrivate
+									: objectiveDetail.isPrivate
+										? objectiveDetail.isPrivate
+										: goalsAttribute.isPrivate,
+							objectiveDescription: goalsAttribute.objectiveDescription
+								? goalsAttribute.objectiveDescription
+								: objectiveDetail.objectiveDescription,
+							startDate: goalsAttribute.startDate ? goalsAttribute.startDate : objectiveDetail.startDate,
+							endDate: goalsAttribute.endDate ? goalsAttribute.endDate : objectiveDetail.endDate,
+							myGoalsDetails: goalsAttribute.myGoalsDetails
+								? goalsAttribute.myGoalsDetails
+								: objectiveDetail.myGoalsDetails,
+							teamOkrRequests: goalsAttribute.teamOkrRequests
+								? goalsAttribute.teamOkrRequests
+								: objectiveDetail.teamOkrRequests,
+						});
+						this.setIsSaveDisabled(true);
+						this.setGaolAttrDateError(this.defaultGaolDateError);
+						this.props.setOpenDrawer(false);
+						this.setGoalsAttribute({});
+					}
+				}
+			}
+		} else if (type === 'close') {
+			this.setShowKr(false);
+			this.props.setGoalDetail({});
+			if (!this.isGoalAttributeUpdated()) {
+				this.props.setModalProps({
+					open: true,
+					type: 'GoalAttr',
+					message: t('unSavedItemAlert'),
+					module: 'user',
+					details: { id: '' },
+				});
+			} else {
+				this.setGoalsAttribute({});
+				this.props.setOpenDrawer(false);
+				this.props.setOpenDrawer(false);
+			}
+		}
+	};
+	handleCloseModal = async (event: any, type: Number) => {
+		if (type === 1) {
+			this.setmodalPropsKR({ open: false, type: '', message: '', module: '' });
+			this.setKeyRes(false);
+		} else {
+			this.setmodalPropsKR({ open: false, type: '', message: '', module: '' });
+		}
+	};
+	openSettingsDrawer = async () => {
+		const okrDtl = await this.props.getOkrDetail(this.okr.objectiveId);
+		this.setGoalsAttribute(okrDtl.data.entity);
+		this.setOpenObjectAttribute(true);
+	};
+}
+function getKrItemTemplate(data: any, relaxMapContext: any) {
+	let context = relaxMapContext.diagramTemplateHelperContext;	
+	let props = context.props;
+	let okr = data.okr;
+	context.okr = okr;
+	let kr = data.kr;
+	let t = props.t;
+	let currentUser = props.currentUser;
+	let handleDeleteOkr = props.handleDeleteOkr.bind(context);;
+	let handleAcceptDeclineClick = context.handleAcceptDeclineClick.bind(context);
+	let handleKRClick = context.handleKRClick.bind(context);
+	let keyAttribute = context.keyAttribute;
+	let setKeyAttribute = context.setKeyAttribute.bind(context);
+	let keyRes = context.keyRes;
+	let dataUpdated = context.dataUpdated;
+	let setdataUpdated = context.setdataUpdated.bind(context);
+	let handleDrawerClose = context.handleDrawerClose.bind(context);
+	let krLoader = context.krLoader;
+	let showKr = context.showKr;
+	let handleKebabClick = context.handleKebabClick.bind(context);
+	let openObjectAttribute = context.openObjectAttribute;
+	let objectiveDetail = context.objectiveDetail;
+	let modalPropsKR = context.modalPropsKR;
+	let handleCloseModal = context.handleCloseModal.bind(context);;
+	let handleCloseObjectiveAttribute = context.handleCloseObjectiveAttribute.bind(context);
+	let isGoalAttributeUpdated = context.isGoalAttributeUpdated;
+	let setIsSaveDisabled = context.setIsSaveDisabled.bind(context);
+	let setGoalsAttribute = context.setGoalsAttribute.bind(context);
+	let goalsAttribute = context.goalsAttribute;
+	let goalAttrDateError = context.goalAttrDateError;
+	let setGaolAttrDateError = context.setGaolAttrDateError.bind(context);
+	return (
+		<Box>
+			<Box className='alignment-kr kr-list'>
+				<Box className='kr-item' id={`kr_${kr?.krId}`} key={`kr_${kr?.krId}`}>
+					{okr?.parent !== '' && (
+						<IconButton className='connect-icon connect-icon-link'>
+							<LinkIcon />
+						</IconButton>
+					)}
+					<Box className='kr-item-col1'>
+						<img src={krFlag} alt='kr flag' />
+						{kr?.krName.length > 40 ? (
+							<Tooltip arrow placement='top' title={kr?.krName}>
+								<Typography variant='h4' className='kr-details'>
+									{kr?.krName.substring(0, 40)}...
+				</Typography>
+							</Tooltip>
+						) : (
+							<Typography variant='h4' className='kr-details'>
+								{kr?.krName}
+							</Typography>
+						)}
+					</Box>
+					<Box className='kr-item-col2'>
+						<OkrProgressBar
+							parentOkr={okr}
+							okr={kr}
+							type={'krAlignmentMap'}
+							t={t}
+							updateProgress={props.updateProgress}
+							showEditLoader={() => { }}
+							currentUser={currentUser}
+							okrMasterData={props.okrMasterData}
+						/>
+
+						{kr.krStatusId === Enums.KR_STATUS_PENDING ? (
+							<OkrPopperMenu
+								{...props}
+								poperClassName={'alignment-popper-menu popper-menu-list okr-list-popper-menu'}
+								okr={okr}
+								kr={kr}
+								type={4}
+								t={t}
+								handleDeleteOkr={handleDeleteOkr}
+								KRType={'WithParent'}
+								alignmentMap={true}
+								handleAcceptDeclineClick={handleAcceptDeclineClick}
+								currentUser={currentUser}
+								poperPlacement={'bottom-start'}
+								poperContainer={false}
+								handleKRClick={handleKRClick}
+								keyAttribute={keyAttribute}
+								setKeyAttribute={setKeyAttribute}
+								keyRes={keyRes}
+								// setKeyRes={setKeyRes}
+								dataUpdated={dataUpdated}
+								setdataUpdated={setdataUpdated}
+								goalDetail={dataUpdated}
+								setGoalDetail={setdataUpdated}
+								handleDrawerClose={handleDrawerClose}
+								keyData={dataUpdated.kr}
+								handleKebabClick={handleKebabClick}
+								loader={krLoader}
+								showKr={showKr}
+							/>
+						) : (
+							<OkrPopperMenu
+								key={kr?.krId}
+								{...props}
+								poperClassName={'alignment-popper-menu popper-menu-list okr-list-popper-menu'}
+								okr={okr}
+								kr={kr}
+								type={2}
+								t={t}
+								handleDeleteOkr={handleDeleteOkr}
+								alignmentMap={true}
+								currentUser={currentUser}
+								poperPlacement={'bottom-start'}
+								poperContainer={false}
+								handleKRClick={handleKRClick}
+								keyAttribute={keyAttribute}
+								setKeyAttribute={setKeyAttribute}
+								keyRes={keyRes}
+								// setKeyRes={setKeyRes}
+								showKr={showKr}
+								dataUpdated={dataUpdated}
+								setdataUpdated={setdataUpdated}
+								goalDetail={dataUpdated}
+								setGoalDetail={setdataUpdated}
+								handleDrawerClose={handleDrawerClose}
+								keyData={dataUpdated.kr}
+								loader={krLoader}
+								handleKebabClick={handleKebabClick}
+							/>
+						)}
+					</Box>
+					{openObjectAttribute && (
+						<GoalAttributes
+							durationCycleDetail={props.durationCycleDetail}
+							currentCycleEndDate={props.currentCycleEndDate}
+							open={openObjectAttribute}
+							handleDrawerClose={handleCloseObjectiveAttribute}
+							objectiveDetail={objectiveDetail}
+							t={t}
+							{...props}
+							isGoalAttributeUpdated={isGoalAttributeUpdated}
+							setIsSaveDisabled={setIsSaveDisabled}
+							setGoalsAttribute={setGoalsAttribute}
+							goalsAttribute={goalsAttribute}
+							loader={krLoader}
+							goalAttrDateError={goalAttrDateError}
+							setGaolAttrDateError={setGaolAttrDateError}
+						/>
+					)}
+
+				</Box>
+			</Box>
+			{modalPropsKR.open && (
+				<AlertDialog
+					module={modalPropsKR.module ? modalPropsKR.module : 'user'}
+					message={modalPropsKR.message}
+					handleCloseModal={handleCloseModal}
+					modalOpen={modalPropsKR.open}
+				/>
+			)}</Box>
+	);
+}
+function getFirstRowTemplate(okr: any, relaxMapContext: any) {
+	let context = relaxMapContext.diagramTemplateHelperContext;	
+	context.okr = okr;
+	let props = context.props;
+	let t = props.t;
+	let currentUser = props.currentUser;
+	let handleDeleteOkr = props.handleDeleteOkr;
+	let openSettingsDrawer = context.openSettingsDrawer;
+	return (
+		<Box className='alignment-card relaxed-card'>
+			<Box className='objective-section'>
+				<Box className='cardHeader'>
+					{okr?.isContributorExist === true && (
+						<IconButton className='connect-icon connect-icon-first'>
+							<IndividualSmallIcon />
+						</IconButton>
+					)}
+					{okr?.isSourceExist === true && (
+						<IconButton className='connect-icon connect-icon-arrow'>
+							<RightArrowIcon />
+						</IconButton>
+					)}
+					<Box className='cardHeader-col1'>
+						<Box className='cardFlag'>
+							<img src={OKRFlag} alt={'Okr flag'} />
+						</Box>
+						<Box className='okr-after-edit'>
+							{okr?.name.length > 92 ? (
+								<Tooltip title={okr?.name} arrow>
+									<Typography variant='h4' className='cardTitle'>
+										{okr?.name.substring(0, 92)}...
+						</Typography>
+								</Tooltip>
+							) : (
+								<Typography variant='h4' className='cardTitle'>
+									{okr?.name}
+								</Typography>
+							)}
+						</Box>
+					</Box>
+					<Box className='cardHeader-col2'>
+						{/* {okr.okrViewKeyResults &&
+				okr.okrViewKeyResults.find((item: any) => item.krStatusId === 0 || item.krStatusId === 2) && ( */}
+						<OkrPopperMenu
+							{...props}
+							poperClassName={'alignment-popper-menu popper-menu-list okr-list-popper-menu'}
+							okr={okr}
+							type={1}
+							t={t}
+							currentUser={currentUser}
+							handleDeleteOkr={handleDeleteOkr}
+							alignmentMap={true}
+							poperPlacement={'bottom-start'}
+							poperContainer={false}
+						/>
+						{/* )} */}
+					</Box>
+				</Box>
+				<Box className='card-toggle'>
+					{okr?.isPrivate === false ? (
+						<OKRButton className='button-gray-kr ' text={'Individual'} icon={<IndividualSmallIcon />} />
+					) : (
+						<OKRButton className='button-gray-kr ' text={'Private'} icon={<PrivateIcon />} />
+					)}
+					<Box className='okr-field-actions' onClick={openSettingsDrawer.bind(context)}>
+						<OKRButton className='settings-btn' icon={<SettingsIcon />} title={'Attributes'} />
+					</Box>
+				</Box>
+				<Box className='alignedRow'>
+					<Box className='usersAligned'>
+						<UserAvatarGroup
+							{...props}
+							contributorDetails={
+								okr.okrViewContributors && okr.okrViewContributors.length
+									? okr.okrViewContributors.filter(
+										(items: any) =>
+											(items.goalStatusId && items.goalStatusId === Enums.KR_STATUS_ACCEPTED) ||
+											items.userType !== 'Owner'
+									)
+									: []
+							}
+							addButtonClassName='add-btn'
+							avatarClassName=''
+							isButtonVisible={false}
+							max={3}
+							loginUserAvatar={
+								okr.okrViewContributors && okr.okrViewContributors.length
+									? okr.okrViewContributors.find((itemKR: any) => itemKR.userType === 'Owner')
+										? okr.okrViewContributors.find((itemKR: any) => itemKR.userType === 'Owner')
+										: okr
+									: okr
+							}
+							currentUser={currentUser}
+							contributorDetailsType={true}
+							isOnHoverVisible={true}
+							poperContainer={false}
+						/>
+					</Box>
+
+					<Box className='cycleProgress'>
+						<Box className='quaterCycle'>
+							<Box className='date-settings alignment-date-settings'>
+								<Box className='calender-date'>{getMonthDate(okr?.dueDate)}</Box>
+								<Typography variant='body2'>Cycle: {okr?.cycle}</Typography>
+							</Box>
+						</Box>
+
+						<Box className='progressChart'>
+							<CircularProgress percentage={okr?.score} score={okr.score} dueDate={okr.dueDate} />
+						</Box>
+					</Box>
+				</Box>
+			</Box>
+		</Box>
+	);
+}
diff --git a/src/components/AlignmentMap/RelaxedMap/DiagramHelper/okr_data.tsx b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/okr_data.tsx
new file mode 100644
index 00000000..27f3aff2
--- /dev/null
+++ b/src/components/AlignmentMap/RelaxedMap/DiagramHelper/okr_data.tsx
@@ -0,0 +1,24 @@
+let okrJsonData: any =
+    [
+        {
+            "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 5473, "name": "test", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 40, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 2, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "5473", "parent": '', "index": 0, "isAnyFeedback": true, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 6695, "krName": "test", "krScore": 40, "krCurrentValue": 40, "krProgress": 2, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": "", "isAnyFeedback": true, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }]
+        },
+        {
+            "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 7730, "name": "Team Okr", "teamId": 415, "teamName": "Chil1", "startDate": "2021-05-06T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 50, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 3, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "7730", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8512, "krName": "Team Kr", "krScore": 50, "krCurrentValue": 50, "krProgress": 3, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": "Chil1", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }]
+        },
+        {
+            "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 7731, "name": "Team Okr", "teamId": 416, "teamName": "Child 2", "startDate": "2021-05-06T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 70, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 4, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "7731", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8514, "krName": "Team Kr", "krScore": 70, "krCurrentValue": 70, "krProgress": 4, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 416, "teamName": "Child 2", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }]
+        },
+        {
+            "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 7870, "name": "Okr private", "teamId": 0, "teamName": "", "startDate": "2021-05-10T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": true, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "7870", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8606, "krName": "kr private", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": "", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }]
+        },
+        {
+            "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 8061, "name": "rahul testing", "teamId": 0, "teamName": "", "startDate": "2021-05-24T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "8061", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8810, "krName": "Test Kr1", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": "", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }, { "employeeId": 398, "krId": 8811, "krName": "test kr 2 3", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": "", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }]
+        },
+        {
+            "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 8202, "name": "T O", "teamId": 415, "teamName": "Chil1", "startDate": "2021-05-30T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 20, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 2, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "8202", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8877, "krName": "T R", "krScore": 20, "krCurrentValue": 40, "krProgress": 2, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": "Chil1", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }, { "employeeId": 307, "firstName": "Mayank", "lastName": "Saxena", "designation": "Team Lead", "image": "", "userType": "" }]
+        }, { "employeeId": 307, "owner": 398, "objectiveType": 1, "objectiveId": 8203, "name": "T O", "teamId": 415, "teamName": "", "startDate": "2021-05-30T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "objectiveUniqueId": "8203", "parent": ["8202"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 307, "krId": 8878, "krName": "T R", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 8877, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 307, "firstName": "Mayank", "lastName": "Saxena", "designation": "Team Lead", "image": "", "userType": "Owner" }] }, { "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 8248, "name": "New Everything", "teamId": 415, "teamName": "Chil1", "startDate": "2021-05-31T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "8248", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8916, "krName": "Everthing KR 1", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": "Chil1", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }, { "employeeId": 398, "krId": 8917, "krName": "Everything KR 1", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": "Chil1", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }, { "employeeId": 307, "firstName": "Mayank", "lastName": "Saxena", "designation": "Team Lead", "image": "", "userType": "" }] }, { "employeeId": 307, "owner": 398, "objectiveType": 1, "objectiveId": 8249, "name": "New Everything", "teamId": 415, "teamName": "", "startDate": "2021-05-31T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "objectiveUniqueId": "8249", "parent": ["8248", "8248"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 307, "krId": 8918, "krName": "Everthing KR 1", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 8916, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }, { "employeeId": 307, "krId": 8919, "krName": "Everything KR 1", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 8917, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 307, "firstName": "Mayank", "lastName": "Saxena", "designation": "Team Lead", "image": "", "userType": "Owner" }] }, { "employeeId": 398, "owner": 398, "objectiveType": 1, "objectiveId": 8280, "name": "Rahul's OKR", "teamId": 415, "teamName": "Chil1", "startDate": "2021-06-01T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "8280", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8952, "krName": "Rahul's KR", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": "Chil1", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }, { "employeeId": 307, "firstName": "Mayank", "lastName": "Saxena", "designation": "Team Lead", "image": "", "userType": "" }] }, { "employeeId": 307, "owner": 398, "objectiveType": 1, "objectiveId": 8281, "name": "Rahul's OKR", "teamId": 415, "teamName": "", "startDate": "2021-06-01T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 1, "parentId": 0, "objectiveUniqueId": "8281", "parent": ["8280"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 307, "krId": 8953, "krName": "Rahul's KR", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 8952, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 415, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 307, "firstName": "Mayank", "lastName": "Saxena", "designation": "Team Lead", "image": "", "userType": "Owner" }] }, { "employeeId": 398, "owner": 656, "objectiveType": 1, "objectiveId": 8326, "name": "Alignment Obj 101", "teamId": 0, "teamName": "", "startDate": "2021-06-01T00:00:00", "dueDate": "2021-07-11T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "8326", "parent": ["8325"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 8975, "krName": "A Obj KR 1", "krScore": 0, "krCurrentValue": 10, "krProgress": 1, "krStartValue": 10, "krTargetValue": 20, "isSourceLinked": true, "contributorCount": 1, "parentId": 8973, "krDueDate": "2021-07-11T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": "", "isAnyFeedback": false, "currencyId": 0, "metricId": 3, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, { "employeeId": 656, "owner": 656, "objectiveType": 1, "objectiveId": 8325, "name": "Alignment Obj 1", "teamId": 0, "teamName": "", "startDate": "2021-06-01T00:00:00", "dueDate": "2021-07-11T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 2, "parentId": 0, "objectiveUniqueId": "8325", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 656, "krId": 8973, "krName": "A Obj KR 1", "krScore": 0, "krCurrentValue": 10, "krProgress": 1, "krStartValue": 10, "krTargetValue": 20, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-07-11T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 3, "assignmentTypeId": 2 }, { "employeeId": 656, "krId": 8974, "krName": "A Obj KR 2", "krScore": 0, "krCurrentValue": 30, "krProgress": 1, "krStartValue": 30, "krTargetValue": 60, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-07-11T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 1, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 656, "firstName": "Alka", "lastName": "Bharti", "designation": "Senior QA Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/3a0371ea-1310-48ba-9019-6c276b65aec1.jpg?Expires=1923743976&Signature=H39eka1gfwGUGNr4i6tbgqI89lXnpxspJ9pIz0zFk5FWAfKMwqPaQ75RcsuDSM7to-M6PV6KnJwvdFd66ZWLqKkWXavd275dVfBPGzWYU8Debdk2sD5ggNMpUzziHAP9i3er4JvkFE4eOkV3OwHsGNL-TqOxCHNF5U-CeBJl-rp9icff27-GaMaRCIWI3XNPUJkxSAytn7F479QeW7IxWALEWV6U5-ujyJSx7x9wGp52j0wG5wBLJDwdNXwIxJm-TVhv6jWrHqqG-s7BGsEaQuV5T5yi9thhM32d0rc2ynFtBOk5151t~tyVvusLh1SoPyMHoY09pZz~9UVPFAtUUQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "" }] }, { "employeeId": 398, "owner": 1499, "objectiveType": 1, "objectiveId": 8477, "name": "Test OKR", "teamId": 393, "teamName": "Unlock OKR Team", "startDate": "2021-05-27T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "objectiveUniqueId": "8477", "parent": ["8177"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 398, "krId": 9080, "krName": "Test KR", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": true, "contributorCount": 1, "parentId": 8868, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 1, "teamId": 393, "teamName": "Unlock OKR Team", "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, { "employeeId": 1499, "owner": 1499, "objectiveType": 1, "objectiveId": 8177, "name": "Test OKR", "teamId": 393, "teamName": "", "startDate": "2021-05-27T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 0, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 1, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 1, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 2, "parentId": 0, "objectiveUniqueId": "8177", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 1499, "krId": 8868, "krName": "Test KR", "krScore": 0, "krCurrentValue": 0, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 393, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 1499, "firstName": "Navin", "lastName": "Sengar", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/2f99770c-59fa-43eb-95f1-cc100e685271.png?Expires=1925286287&Signature=W6jX-aAnb7j0q1QvHw3jjuOkRoEh~Mx2RwhLy69JQbtjzvccM-z~LvHEOndZvdWpVEK1NytB1TBaywVumhhHgPSWPQSz0cE2uXSgc2q24C3Aj-Kja9w0DK61JzSIRUjIGwJ2erDVfx19xwwMXjIqqweA63HKt840XkjPo1YLWJsdGPtvvjuRvbahqy9xk45weP~ZhpBoDs2vdj1cvIsVlho4ftcASZgAhn~olu0inLgh7B5LsfbRQUR1ApO~utBkpUOsK5SkhDklPl00~wJzXQT1V7153FoDGfb33LmdM4QPhk2u2mtRqaXvFDPxh-AgvlPQNmhDuditQ3RYPI~3HA__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }, { "employeeId": 794, "firstName": "Ritesh", "lastName": "Shrivastava", "designation": "Senior Web Developer", "image": "", "userType": "" }] }, { "employeeId": 398, "owner": 0, "objectiveType": 2, "objectiveId": 8941, "name": "Ultra OKR Ultra OKR Ultra OKR", "teamId": 0, "teamName": "", "startDate": "2021-05-11T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 2, "progress": 4, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 0, "objectiveStatusId": 2, "krCurrentValue": 100, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": true, "contributorCount": 1, "parentId": 8656, "objectiveUniqueId": "8941", "parent": ["5512"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 1, "isAligned": false, "okrViewKeyResults": [], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Parent" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, { "employeeId": 1498, "owner": 1498, "objectiveType": 1, "objectiveId": 5512, "name": "Alignment Map OKR", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 4, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 2, "parentId": 0, "objectiveUniqueId": "5512", "parent": '', "index": 0, "isAnyFeedback": true, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 1498, "krId": 6732, "krName": "Alignment KR Alignment KR Alignment KR", "krScore": 100, "krCurrentValue": 100, "krProgress": 4, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }, { "employeeId": 1498, "krId": 8656, "krName": "Ultra OKR Ultra OKR Ultra OKR", "krScore": 100, "krCurrentValue": 100, "krProgress": 4, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Owner" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "" }] }, { "employeeId": 398, "owner": 0, "objectiveType": 2, "objectiveId": 8942, "name": "Mew Tesr KR", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 2, "progress": 4, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 0, "objectiveStatusId": 2, "krCurrentValue": 100, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": true, "contributorCount": 1, "parentId": 6735, "objectiveUniqueId": "8942", "parent": ["5516"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 1, "isAligned": false, "okrViewKeyResults": [], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Parent" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, { "employeeId": 1498, "owner": 1498, "objectiveType": 1, "objectiveId": 5516, "name": "New Test Obj", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 4, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 2, "parentId": 0, "objectiveUniqueId": "5516", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 1498, "krId": 6735, "krName": "Mew Tesr KR", "krScore": 100, "krCurrentValue": 100, "krProgress": 4, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Owner" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "" }] }, { "employeeId": 398, "owner": 0, "objectiveType": 2, "objectiveId": 8943, "name": "Alignment KR Alignment KR Alignment KR", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 2, "progress": 4, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 0, "objectiveStatusId": 2, "krCurrentValue": 100, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": true, "contributorCount": 1, "parentId": 6732, "objectiveUniqueId": "8943", "parent": ["5512"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 1, "isAligned": false, "okrViewKeyResults": [], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Parent" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, { "employeeId": 398, "owner": 0, "objectiveType": 2, "objectiveId": 8944, "name": "For Mayank Tet KR", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 2, "progress": 4, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 0, "objectiveStatusId": 2, "krCurrentValue": 100, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": true, "contributorCount": 1, "parentId": 6739, "objectiveUniqueId": "8944", "parent": ["5517"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 1, "isAligned": false, "okrViewKeyResults": [], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Parent" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, { "employeeId": 1498, "owner": 1498, "objectiveType": 1, "objectiveId": 5517, "name": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled ", "teamId": 0, "teamName": "", "startDate": "2021-05-04T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 100, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 4, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 2, "parentId": 0, "objectiveUniqueId": "5517", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 1498, "krId": 6739, "krName": "For Mayank Tet KR", "krScore": 100, "krCurrentValue": 100, "krProgress": 4, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Owner" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "" }] }, { "employeeId": 398, "owner": 0, "objectiveType": 2, "objectiveId": 8945, "name": "Next Level KR", "teamId": 0, "teamName": "", "startDate": "2021-05-24T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 30, "cycle": "Q2, 2021", "krStatusId": 2, "progress": 2, "isContributorExist": false, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 0, "objectiveStatusId": 2, "krCurrentValue": 30, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": true, "contributorCount": 1, "parentId": 8815, "objectiveUniqueId": "8945", "parent": ["8064"], "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 1, "isAligned": false, "okrViewKeyResults": [], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Parent" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "Owner" }] }, {
+            "employeeId": 1498, "owner": 1498, "objectiveType": 1, "objectiveId": 8064, "name": "Next Level OKR", "teamId": 0, "teamName": "", "startDate": "2021-05-24T00:00:00", "dueDate": "2021-06-30T00:00:00", "score": 88.33, "cycle": "Q2, 2021", "krStatusId": 0, "progress": 4, "isContributorExist": true, "isSourceExist": false, "isPrivate": false, "objectiveTypeId": 2, "objectiveStatusId": 2, "krCurrentValue": 0, "krStartValue": 0, "krTargetValue": 0, "isSourceLinked": false, "contributorCount": 2, "parentId": 0, "objectiveUniqueId": "8064", "parent": '', "index": 0, "isAnyFeedback": false, "currencyId": 0, "metricId": 0, "assignmentTypeId": 0, "isAligned": false, "okrViewKeyResults": [{ "employeeId": 1498, "krId": 8815, "krName": "Next Level KR", "krScore": 65, "krCurrentValue": 100, "krProgress": 2, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }, { "employeeId": 1498, "krId": 8816, "krName": "teat kr", "krScore": 100, "krCurrentValue": 100, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }, { "employeeId": 1498, "krId": 8817, "krName": "test hr", "krScore": 100, "krCurrentValue": 100, "krProgress": 1, "krStartValue": 0, "krTargetValue": 100, "isSourceLinked": false, "contributorCount": 0, "parentId": 0, "krDueDate": "2021-06-30T00:00:00", "krStatusId": 2, "teamId": 0, "teamName": null, "isAnyFeedback": false, "currencyId": 0, "metricId": 5, "assignmentTypeId": 2 }], "okrViewContributors": [{ "employeeId": 1498, "firstName": "Smrita", "lastName": "Gupta", "designation": "Senior Software Engineer", "image": "", "userType": "Owner" }, { "employeeId": 398, "firstName": "Rahul", "lastName": "Papnoi", "designation": "Senior Software Engineer", "image": "https://d1c4w4cknd36sb.cloudfront.net/ProfileImage/8b400028-f60b-4f71-9d92-9a206d50d43d.jpg?Expires=1923804330&Signature=DiQ3-bFDeIdG-5S~18m5MfxgkFp~qfBDaACHA~aDaioJ8cGWK7mIyV~axS69~JK~CoBhDHQJ3sf2BOsQUy~EtaM9rumO2qqMwLtZoyNy~v6RmOq8AIin76~8aguQivdI7oHYgsWAQXpFJGMJbeDm~aiElI-FsQaWEyZ0tLEkTLhcbko4uvbNIqWOLPaQegvekKKn90fbrp9AtC4iyTPXocFfRO2RaylBxywfLgG~9U02J-ANDRVu~YecYKfzyoyjSx3tlY3zYu4AhcFE6uzKJVm-ZkBt0r56qfqnY84lFW89ZSgrNdq2RHfDKQyFYAywUGt4pjyPiMJTNNyZw90fvQ__&Key-Pair-Id=APKAIUVT54QRP2NDQEKQ", "userType": "" }]
+        }];
+
+export default okrJsonData;
\ No newline at end of file
diff --git a/src/components/AlignmentMap/RelaxedMap/index.jsx b/src/components/AlignmentMap/RelaxedMap/index.jsx
index 0f522770..44a3cbe5 100644
--- a/src/components/AlignmentMap/RelaxedMap/index.jsx
+++ b/src/components/AlignmentMap/RelaxedMap/index.jsx
@@ -10,6 +10,8 @@ import {
 	ChildArrangement,
 	LineDistribution,
 	ConnectionPointOrigin,
+	NodeConstraints,
+	ConnectorConstraints
 } from '@syncfusion/ej2-react-diagrams';
 import { Box, Typography } from '@material-ui/core';
 import { SampleBase } from './sample-base';
@@ -17,12 +19,21 @@ import { DataManager } from '@syncfusion/ej2-data';
 import { MenuComponent } from '@syncfusion/ej2-react-navigations';
 import { ToolbarComponent } from '@syncfusion/ej2-react-navigations';
 import { getLocalStorageItem } from '../../../services/StorageService';
-import ObjectiveCard from '../AlignmentListing/ObjectiveCard';
-import StandaloneCard from '../AlignmentListing/StandaloneCard';
+import { DiagramLayoutHelper } from './DiagramHelper/diagram-layout-helper';
+import { DiagramJsonHelper } from './DiagramHelper/diagram-json-helper';
+import { DiagramOkrHelper } from './DiagramHelper/diagram-okr-helper';
+import { DiagramTemplateHelper } from './DiagramHelper/diagram-template-helper';
+import { DiagramSelectionHelper } from './DiagramHelper/diagram-selection-helper';
 
+import okrJsonData from './DiagramHelper/okr_data';
 let diagramInstance;
-let template;
+let diagramLayoutHelper;
+let diagramBox;
+let diagramOkrHelper;
+let diagramTemplateHelper;
+let diagramSelectionHelper;
 export default class RelaxedMap extends SampleBase {
+	diagramTemplateHelperContext;
 	constructor(props) {
 		super(props);
 		const { alignResult } = this.props;
@@ -31,7 +42,10 @@ export default class RelaxedMap extends SampleBase {
 			mapData: alignResult,
 			loggedInUser: userDetail,
 		};
-		template = this.diagramTemplate;
+		diagramLayoutHelper = new DiagramLayoutHelper();
+		this.diagramTemplateHelperContext = diagramTemplateHelper = new DiagramTemplateHelper(this.props);
+		diagramOkrHelper = new DiagramOkrHelper(diagramTemplateHelper);
+		diagramSelectionHelper = new DiagramSelectionHelper();
 	}
 
 	onItemClick(args) {
@@ -55,64 +69,6 @@ export default class RelaxedMap extends SampleBase {
 				break;
 		}
 	}
-
-	diagramTemplate = (data) => {
-		let cardobject = document.querySelectorAll('.foreign-object .foreign-object');
-		if (cardobject.length > 0) {
-			cardobject.forEach(function (value, index) {
-				value.style.zIndex = cardobject.length - index;
-			});
-		}
-		if (data.data && data.data.objectiveType === 2) {
-			return (
-				<StandaloneCard
-					{...this.props}
-					data={data}
-					userDetail={this.props.userDetail}
-					handleDeleteOkr={this.props.handleDeleteOkr}
-					setOpenDrawer={this.props.setOpenDrawer}
-					setModalProps={this.props.setModalProps}
-					updateProgress={this.props.updateProgress}
-					showEditLoader={this.props.showEditLoader}
-				/>
-			);
-		}
-		return (
-			<ObjectiveCard
-				{...this.props}
-				data={data}
-				userDetail={this.props.userDetail}
-				handleDeleteOkr={this.props.handleDeleteOkr}
-				setModalProps={this.props.setModalProps}
-				updateProgress={this.props.updateProgress}
-				showEditLoader={this.props.showEditLoader}
-				showAddGoalForm={this.props.showAddGoalForm}
-				showAddGoal={this.props.showAddGoal}
-				durationCycleDetail={this.props.durationCycleDetail}
-				currentCycleEndDate={this.props.currentCycleEndDate}
-				currentCycleId={this.props.currentCycleId}
-				year={this.props.year}
-				t={this.props.t}
-				fetchOkr={this.props.fetchOkr}
-				setGoalDetail={this.props.setGoalDetail}
-				setIsGoalCreated={this.props.setIsGoalCreated}
-				saveAndEditObjectiveAndKr={this.props.saveAndEditObjectiveAndKr}
-				setFormSubmit={this.props.setFormSubmit}
-				formSubmit={this.props.formSubmit}
-				isGoalCreated={this.props.isGoalCreated}
-				keyDetailObject={this.props.keyDetailObject}
-				goalDetailObject={this.props.goalDetailObject}
-				// showApiMsgs={showApiMsgs}
-				// isTabChanged={isTabChanged}
-				// setIsTabChanged={setIsTabChanged}
-				// addObjectiveCallback={addObjectiveCallback}
-			/>
-		);
-	};
-	// rendereComplete() {
-	// 	// diagramInstance.reset();
-	// 	// diagramInstance.fitToPage();
-	// }
 	RenameCard = (data) => {
 		alert(data.data.TextToShow);
 	};
@@ -142,153 +98,175 @@ export default class RelaxedMap extends SampleBase {
 	}
 
 	render() {
-		const { alignResult } = this.props;
-		//const { t } = useTranslation();
-		let alignmentData = [];
-		if (alignResult.length <= 0) {
-			return (
-				<Box className='welcome-content'>
-					<Box textAlign='center'>
-						<Typography>Loading...</Typography>
-						{/* <AnimatedIcon className='' width='519' type='image/svg+xml' alt='WelcomeImage' imagePath={AlignmentImage} />
+		if (!diagramBox) {
+			const { alignResult } = this.props;
+			let alignmentData = [];
+			if (alignResult.length <= 0) {
+				return (
+					<Box className='welcome-content'>
+						<Box textAlign='center'>
+							<Typography>Loading...</Typography>
+							{/* <AnimatedIcon className='' width='519' type='image/svg+xml' alt='WelcomeImage' imagePath={AlignmentImage} />
 						<Typography variant='h2'>Setting Objectives is the first step towards success</Typography>
 						<Typography>Start aligning to Organizational Objectives</Typography> */}
+						</Box>
 					</Box>
-				</Box>
-			);
-		} else {
-			alignmentData =
-				alignResult &&
-				alignResult.length > 0 &&
-				alignResult.map((item, i) => {
+				);
+			} else {
+				alignmentData = okrJsonData;//alignResult;
+				alignmentData.forEach((item, i) => {
 					//item.index = i + 1;
 					if (item.parent.length === 0) {
 						item.parent = '';
 					}
 					return item;
 				});
-		}
+				DiagramJsonHelper.UpdateChildOkrs(alignmentData);
+			}
 
-		return (
-			<Box className='diagram-control-pane'>
-				<MenuComponent items={this.menuItems} />
-				<Box className='control-panel'>
+			diagramBox = (
+				<Box className='diagram-control-pane'>
+					<MenuComponent items={this.menuItems} />
+					<Box className='control-panel'>
+						<Box className='control-section'>
+							<Box className='content-wrapper'>
+								<ToolbarComponent
+									id='toolbar_diagram'
+									clicked={this.onItemClick}
+									items={[
+										{
+											type: 'Button',
+											//tooltipText: 'ZoomIn',
+											text: 'Zoom In',
+											//prefixIcon: 'e-diagram-icons e-diagram-zoomin',
+										},
+										{
+											type: 'Button',
+											//tooltipText: 'ZoomOut',
+											text: 'Zoom Out',
+											//prefixIcon: 'e-diagram-icons e-diagram-zoomout',
+										},
+										{
+											type: 'Button',
+											//tooltipText: 'Reset',
+											text: 'Reset',
+											//prefixIcon: 'e-diagram-icons e-diagram-reset',
+										},
+										{
+											type: 'Button',
+											//tooltipText: 'Reset',
+											text: 'ToggleExpand',
+											//prefixIcon: 'e-diagram-icons e-diagram-reset',
+										},
+									]}
+								/>
+							</Box>
+						</Box>
+					</Box>
 					<Box className='control-section'>
 						<Box className='content-wrapper'>
-							<ToolbarComponent
-								id='toolbar_diagram'
-								clicked={this.onItemClick}
-								items={[
-									{
-										type: 'Button',
-										//tooltipText: 'ZoomIn',
-										text: 'Zoom In',
-										//prefixIcon: 'e-diagram-icons e-diagram-zoomin',
-									},
-									{
-										type: 'Button',
-										//tooltipText: 'ZoomOut',
-										text: 'Zoom Out',
-										//prefixIcon: 'e-diagram-icons e-diagram-zoomout',
-									},
-									{
-										type: 'Button',
-										//tooltipText: 'Reset',
-										text: 'Reset',
-										//prefixIcon: 'e-diagram-icons e-diagram-reset',
-									},
-									{
-										type: 'Button',
-										//tooltipText: 'Reset',
-										text: 'ToggleExpand',
-										//prefixIcon: 'e-diagram-icons e-diagram-reset',
+							<DiagramComponent
+								id='diagram'
+								ref={(diagram) => (diagramInstance = diagram)}
+								width={'100%'}
+								height={'1500px'}
+								nodeTemplate={diagramTemplateHelper.getTemplate.bind(this)}
+								snapSettings={{ constraints: SnapConstraints.None }}
+								dataSourceSettings={{
+									id: 'objectiveUniqueId',
+									parentId: 'parent',
+									dataSource: new DataManager(alignmentData),
+									doBinding: (nodeModel, data, diagram) => {
+										//nodeModel.visible = false;
+									}
+								}}
+								//tool={DiagramTools.ZoomPan}
+								layout={{
+									connectionPointOrigin: ConnectionPointOrigin.SamePoint,
+									enableAnimation: true,
+									type: 'ComplexHierarchicalTree',
+									orientation: 'LeftToRight',
+									horizontalSpacing: 200,
+									verticalSpacing: 130,
+									arrangement: ChildArrangement.Linear,
+									getLayoutInfo: (node, options) => {
+										/* tslint:disable:no-string-literal */
+										if (node.data['TextToShow'] === 'General Manager') {
+											options.assistants.push(options.children[0]);
+											options.children.splice(0, 1);
+										}
+										if (!options.hasSubTree) {
+											options.type = 'Right';
+										}
 									},
-								]}
-							/>
-						</Box>
-					</Box>
-				</Box>
-				<Box className='control-section'>
-					<Box className='content-wrapper'>
-						<DiagramComponent
-							id='diagram'
-							ref={(diagram) => (diagramInstance = diagram)}
-							width={'100%'}
-							height={'1500px'}
-							snapSettings={{ constraints: SnapConstraints.None }}
-							nodeTemplate={template}
-							// backgroundColor='#6BA5D7'
-							//configures data source settings
-							dataSourceSettings={{
-								id: 'objectiveUniqueId',
-								parentId: 'parent',
-								//dataSource: new DataManager(localBindData),
-								dataSource: new DataManager(alignmentData),
-								doBinding: (nodeModel, data, diagram) => {
-									nodeModel.nodeTemplate = template.bind(data);
-									nodeModel.template = template;
-									nodeModel.style = { boder: '1px solid #000000' };
-									nodeModel.shape = {
-										type: 'HTML',
-									};
-								},
-							}}
-							//Disables all interactions except zoom/pan
-							tool={DiagramTools.ZoomPan}
-							//Configures automatic layout
-							layout={{
-								// connectionPointOrigin: ConnectionPointOrigin.DifferentPoint,
-								connectionPointOrigin: ConnectionPointOrigin.SamePoint,
-								enableAnimation: true,
-								type: 'ComplexHierarchicalTree',
-								// type: 'HierarchicalTree',
-								orientation: 'LeftToRight',
-								// orientation: 'TopToBottom',
-								horizontalSpacing: 200,
-								verticalSpacing: 130,
-								arrangement: ChildArrangement.Linear,
-								// arrangement: ChildArrangement.NonLinear,
-								getLayoutInfo: (node, options) => {
+								}}
+								//Defines the default node and connector properties
+								getNodeDefaults={(obj, diagram) => {
+									obj.nodeTemplate = diagramTemplateHelper.getTemplate.bind(obj.data);
+									obj.template = diagramTemplateHelper.getTemplate;
+									obj.constraints = NodeConstraints.Default & ~NodeConstraints.Select;
+
 									/* tslint:disable:no-string-literal */
-									if (node.data['TextToShow'] === 'General Manager') {
-										options.assistants.push(options.children[0]);
-										options.children.splice(0, 1);
+									if (!obj.excludeFromLayout && !diagramSelectionHelper.IsSelectionHelper(obj)) {
+										//obj.visible = false;
+										return nodeDefaults(obj, diagram);
 									}
-									if (!options.hasSubTree) {
-										options.type = 'Right';
+
+								}}
+								getConnectorDefaults={(connector, diagram) => {
+									// connector.constraints = ConnectorConstraints.Default & ~ConnectorConstraints.Select;
+
+									if (!diagramSelectionHelper.IsSelectionHelper(connector)) {
+										connector.visible = false;
+										return connectorDefaults(connector, diagram);
 									}
-								},
-							}}
-							//Defines the default node and connector properties
-							getNodeDefaults={(obj, diagram) => {
-								/* tslint:disable:no-string-literal */
-								return nodeDefaults(obj, diagram);
-							}}
-							getConnectorDefaults={(connector, diagram) => {
-								return connectorDefaults(connector, diagram);
-							}}
-							/* created={() => {
-								return expandAll(true);
-							}} */
-						>
-							<Inject services={[DataBinding, LayoutAnimation, ComplexHierarchicalTree, LineDistribution]} />
-						</DiagramComponent>
+								}}
+								click={(args) => { diagramSelectionHelper.OnClickDiagram(args, diagramInstance) }}
+								created={() => {
+									let ins = this;
+									diagramInstance.connectors.forEach((c) => {
+										if (!diagramSelectionHelper.IsSelectionHelper(c)) {
+											let sourceNode = diagramInstance.nodes.find(n => n.id === c.sourceID);
+											let targetNode = diagramInstance.nodes.find(n => n.id === c.targetID);
+											if (sourceNode && targetNode) {
+												c.sourcePortID = sourceNode.ports[1].id;
+												c.targetPortID = targetNode.ports[0].id;
+											}
+											c.visible = true;
+											diagramInstance.dataBind();
+										}
+									});
+									diagramOkrHelper.CreateOkrNodes(diagramInstance, diagramTemplateHelper);
+									diagramLayoutHelper.DockToTop(diagramInstance, diagramOkrHelper);
+
+									diagramInstance.nodes.forEach((n) => {
+										n.visible = true;
+									});
+
+									// return expandAll(true);
+								}}
+							>
+								<Inject services={[DataBinding, LayoutAnimation, ComplexHierarchicalTree, LineDistribution]} />
+							</DiagramComponent>
+						</Box>
 					</Box>
+					{/* <button onClick={() => expandAll()}>Expand All</button> */}
 				</Box>
-				{/* <button onClick={() => expandAll()}>Expand All</button> */}
-			</Box>
-		);
+			);
+		}
+		return diagramBox;
 	}
 }
 
 //sets default value for Node.
 function nodeDefaults(obj, diagram) {
-	//obj.backgroundColor = obj.data.color;
+	obj.pivot = { x: 0, y: 0 };
 	obj.style = {
-		fill: 'none',
-		strokeColor: 'none',
+		fill: 'white',
+		strokeColor: '#9CD3FF',
+		strokeWidth: 1,
 		color: 'white',
-		borderCorner: '30',
+		borderCorner: 30,
 	};
 	obj.expandIcon = {
 		height: 24,
@@ -310,9 +288,10 @@ function nodeDefaults(obj, diagram) {
 	obj.margin = { left: 10, right: 10, top: 0, bottom: 0 };
 	obj.collapseIcon.fill = 'white';
 	obj.collapseIcon.borderColor = '#39a3fa';
-	obj.width = 500;
-	obj.height = 180;
-	obj.offsetX = window.innerWidth / 2;
+	obj.width = 520;
+	obj.height = diagramOkrHelper.GetOkrHeight(obj);
+	obj.offsetX = -window.innerWidth / 2;
+	obj.ports = [diagramOkrHelper.getLeftPort(obj), diagramOkrHelper.getRightPort(obj)];
 	// obj.offsetY = obj.data.index * 300;
 	// if (obj.data && obj.data.objectiveType === 1) {
 	// 	obj.offsetY = obj.data.index * 120;
diff --git a/src/components/AlignmentMap/style.scss b/src/components/AlignmentMap/style.scss
index 6683d44f..6c0f4ba6 100644
--- a/src/components/AlignmentMap/style.scss
+++ b/src/components/AlignmentMap/style.scss
@@ -195,16 +195,16 @@
 			display: none;
 		}
 	}
-	.relaxed-tab{
-		.diagram-control-pane{
-				[id*="_tarDec_groupElement"] {
-					@include transform(translate(-20px , -60px));
-				}
-				[id*="_path_groupElement"] {					
-					@include transform(translate(-0px , -60px));
-				}
-		}
-	}
+	// .relaxed-tab{
+	// 	.diagram-control-pane{
+	// 			[id*="_tarDec_groupElement"] {
+	// 				@include transform(translate(-20px , -60px));
+	// 			}
+	// 			[id*="_path_groupElement"] {					
+	// 				@include transform(translate(-0px , -60px));
+	// 			}
+	// 	}
+	// }
 	.compact-tab{
 		.diagram-control-pane{
 			[id*="_tarDec_groupElement"] {
@@ -462,15 +462,15 @@
 
 .alignment-card {
 	max-width: 31.25em;
-	border: 1px solid $backgroundColor13;
-	@include border-radius(0.375em);
-	@include box-shadow(0px 0px 5px $color3Light4);
-	background-color: $backgroundColor1;
-	padding: 0.625em;
+	// border: 1px solid $backgroundColor13;
+	// @include border-radius(0.375em);
+	// @include box-shadow(0px 0px 5px $color3Light4);
+	 background-color: $backgroundColor1;
+	// padding: 0.625em;
 	position: relative;
 	min-width: 31.25em;
 	&:hover{	
-	   @include box-shadow(0px 10px 30px $color3Light3);
+	//    @include box-shadow(0px 10px 30px $color3Light3);
 		.card-toggle{
 			.okr-field-actions{
 				opacity: 1;
@@ -589,63 +589,61 @@
 					
 		}
 		
-	}
-	.kr-list {
+	}	
+}
+.alignment-kr.kr-list {
+	@include flex;
+	flex-direction: column;
+	// margin-top: 1em;
+	.kr-item {
+		// margin-top: 5px;
+		background: $backgroundColor9;
+		border: 1px solid $backgroundColor12;
+		@include border-radius(6px);
+		padding: 3px 0px 3px 8px;
 		@include flex;
-		flex-direction: column;
-		margin-top: 1em;
-		.kr-item {
-			margin-top: 5px;
-			background: $backgroundColor9;
-			border: 1px solid $backgroundColor12;
-			@include border-radius(6px);
-			padding: 3px 0px 3px 8px;
+		align-items: center;
+		justify-content: space-between;
+		position: relative;
+		.connect-icon.connect-icon-link{
+			left: -2.0625em;
+			top: 50%;
+			margin-top: -12px;
+		}
+		.kr-item-col1{
+		   @include flex;
+			align-items: flex-start;
+			padding-right: 1.25em;
+			.kr-details {
+				overflow: hidden;
+				padding-left: 0.4375em;
+				font-weight: normal;
+			}
+		}
+		.kr-item-col2{
 			@include flex;
 			align-items: center;
-			justify-content: space-between;
-			position: relative;
-			.connect-icon.connect-icon-link{
-				left: -2.0625em;
-				top: 50%;
-				margin-top: -12px;
-			}
-			.kr-item-col1{
-			   @include flex;
-			    align-items: flex-start;
-				padding-right: 1.25em;
-				.kr-details {
-					overflow: hidden;
-					padding-left: 0.4375em;
-					font-weight: normal;
-				}
+			.kr-percentage {
+				min-width: 3.1875em;
+				background: #f8f9fa;
+				border: 1px solid #e1e1e2;
+				box-sizing: border-box;
+				@include border-radius(6px);
+				color: $backgroundColor7;
+				font-weight: $fontWeightBold;
+				padding: 0.125em 0.4375em;
+				margin: 0 0.3125em;
+				text-align: center;
+				cursor: pointer;
 			}
-			.kr-item-col2{
-				@include flex;
-			    align-items: center;
-				.kr-percentage {
-					min-width: 3.1875em;
-					background: #f8f9fa;
-					border: 1px solid #e1e1e2;
-					box-sizing: border-box;
-					@include border-radius(6px);
-					color: $backgroundColor7;
-					font-weight: $fontWeightBold;
-					padding: 0.125em 0.4375em;
-					margin: 0 0.3125em;
-					text-align: center;
-					cursor: pointer;
-				}
-				.kebab-icon{
-					padding: 0;
-					width: 20px;
-                    height: 20px;  
-					margin:0px;
-				}
+			.kebab-icon{
+				padding: 0;
+				width: 20px;
+				height: 20px;  
+				margin:0px;
 			}
 		}
 	}
-	
-	
 }
 .MuiIconButton-root.connect-icon {
 	position: absolute;
